class Solution{ 
    public int[] kWeakestRows(int[][] mat, int k) {
        int t=0;
        int count=0;
        int n = mat.length;
        int m= mat[0].length;
        int arr[]=new int[n];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==1)
                    count++;
            }
            arr[t]=count;
            count=0;
            t++;
        }
        LinkedHashMap<Integer,Integer> map = new LinkedHashMap<>();
        for(int i=0;i<n;i++){
            map.put(i,arr[i]);
        }
         List<Map.Entry<Integer, Integer>> list = 
               new LinkedList<Map.Entry<Integer, Integer>>(map.entrySet()); 
  
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer> >() { 
            public int compare(Map.Entry<Integer, Integer> o1,  
                               Map.Entry<Integer, Integer> o2) 
            { 
                return (o1.getValue()).compareTo(o2.getValue()); 
            } 
        }); 
        int arr1[]=new int[k];
        for(int i=0;i<list.size() && i<k;i++){
            arr1[i] = list.get(i).getKey();
        }
        return arr1;
    }
}